import java.io.*;
import java.math.BigDecimal;
import java.nio.file.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Test {
    public static void main(String[] args) {
        File folder = new File("./genCase/z3");
        File[] files = folder.listFiles((dir, name) -> name.endsWith(".txt"));

        if (files == null || files.length == 0) {
            System.out.println("No input files found in genCase/z3/");
            return;
        }

        for (File file : files) {
            BigDecimal a, b, c;
            String expectedX1 = null;
            String expectedX2 = null;
            
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                try {
                    a = new BigDecimal(reader.readLine().trim());
                    b = new BigDecimal(reader.readLine().trim());
                    c = new BigDecimal(reader.readLine().trim());
            
                    // Try to read optional 4th line (expected roots)
                    String fourthLine = reader.readLine();
                    if (fourthLine != null && fourthLine.trim().startsWith("x =")) {
                        String rootLine = fourthLine.trim().substring(3).trim(); // remove "x ="
                        String[] parts = rootLine.split(",");
                        if (parts.length >= 1) {
                            expectedX1 = parts[0].trim();
                        }
                        if (parts.length >= 2) {
                            expectedX2 = parts[1].trim();
                        }
                    }
            
                    // If a == 0, override with defaults
                    if (a.compareTo(BigDecimal.ZERO) == 0) {
                        System.out.println("File: " + file.getName() + " → a == 0, overriding with defaults.");
                        a = BigDecimal.ONE;
                        b = new BigDecimal("2");
                        c = new BigDecimal("1");
                    }
            
                    // If any value exceeds 9999999999999998, fallback
                    BigDecimal LIMIT = new BigDecimal("9999999999999998");
                    if (a.compareTo(LIMIT) > 0 || b.compareTo(LIMIT) > 0 || c.compareTo(LIMIT) > 0) {
                        System.out.println("File: " + file.getName() + " → value exceeds limit, using defaults.");
                        a = BigDecimal.ONE;
                        b = new BigDecimal("2");
                        c = new BigDecimal("1");
                    }
            
                } catch (NumberFormatException | NullPointerException e) {
                    System.out.println("File: " + file.getName() + " → invalid number format, using defaults.");
                    a = BigDecimal.ONE;
                    b = new BigDecimal("2");
                    c = new BigDecimal("1");
                }
            
                System.out.printf("File: %s → a=%s, b=%s, c=%s%n", file.getName(),
                        a.toPlainString(), b.toPlainString(), c.toPlainString());
            
                if (expectedX1 != null) {
                    System.out.println("→ Expected x1 = " + expectedX1);
                }
                if (expectedX2 != null) {
                    System.out.println("→ Expected x2 = " + expectedX2);
                }

                // === Inject input into Quadratic ===
                String simulatedInput = a.toPlainString() + "\n"
                        + b.toPlainString() + "\n"
                        + c.toPlainString() + "\n"
                        + "n\n"; // quit after solving

                ByteArrayInputStream fakeIn = new ByteArrayInputStream(simulatedInput.getBytes());
                System.setIn(fakeIn); // Override System.in

                // === Redirect System.out to capture printed result ===
                PrintStream originalOut = System.out;
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                PrintStream captureOut = new PrintStream(baos);
                System.setOut(captureOut);

                // === Run the solver ===
                Quadratic.main(new String[0]);

                // === Restore original output ===
                System.out.flush();
                System.setOut(originalOut);

                // === Extract result ===
                String capturedOutput = baos.toString();
                System.out.println("→ Solving using Quadratic.main():");
                System.out.println(capturedOutput);

                // === Use regex to extract x1 and x2 ===
                String x1 = null;
                String x2 = null;

                Pattern x1Pattern = Pattern.compile("x1\\s*=\\s*([+-]?[\\d\\.Ee]+)");
                Pattern x2Pattern = Pattern.compile("x2\\s*=\\s*([+-]?[\\d\\.Ee]+)");

                Matcher m1 = x1Pattern.matcher(capturedOutput);
                if (m1.find()) {
                    x1 = m1.group(1);
                }

                Matcher m2 = x2Pattern.matcher(capturedOutput);
                if (m2.find()) {
                    x2 = m2.group(1);
                }

                // === Print extracted root values ===
                System.out.println("→ Extracted roots:");
                System.out.println("x1 = " + x1);
                if (x2 != null) {
                    System.out.println("x2 = " + x2);
                }

                BigDecimal EPSILON = new BigDecimal("1e-12");
                boolean match = true;

                if (expectedX1 != null || expectedX2 != null) {
                    // Check for missing actual values first
                    if ((expectedX1 != null && x1 == null)
                            || (expectedX2 != null && expectedX2.length() > 0 && x2 == null)) {
                        System.out.println("❌ Expected root(s) provided, but actual output missing x1 or x2.");
                        match = false;
                    } else {
                        // Compare expected and actual values
                        try {
                            if (expectedX1 != null) {
                                BigDecimal exp1 = new BigDecimal(expectedX1);
                                BigDecimal act1 = new BigDecimal(x1);
                                match &= exp1.subtract(act1).abs().compareTo(EPSILON) <= 0;
                            }
                            if (expectedX2 != null && x2 != null) {
                                BigDecimal exp2 = new BigDecimal(expectedX2);
                                BigDecimal act2 = new BigDecimal(x2);
                                match &= exp2.subtract(act2).abs().compareTo(EPSILON) <= 0;
                            }
                        } catch (Exception e) {
                            match = false;
                        }

                        System.out.println("→ Comparison with expected values: " + (match ? "✔️" : "❌"));
                    }
                } else {
                    // No expected output → check for default result
                    match = "-1".equals(x1);
                    System.out.println("→ No expected output provided. Check if x1 == -1 → " + (match ? "✔️" : "❌"));
                }

                // Final verdict
                if (!match) {
                    System.out.println("❌ Test failed for file: " + file.getName());
                } else {
                    System.out.println("✅ Test passed.");
                }

                System.out.println("Finish this turn-----------!");


            } catch (IOException e) {
                System.out.println("Error reading file: " + file.getName());
                e.printStackTrace();
            }
        }
    }
}
